/* tslint:disable */
/* eslint-disable */
/**
 * test-open-api
 * ほげほげ説明
 *
 * The version of the OpenAPI document: 1.0
 * Contact: test@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SignInRequest,
  SignOut200Response,
  SignUpRequest,
  ValidateToken200Response,
} from '../models';
import {
    SignInRequestFromJSON,
    SignInRequestToJSON,
    SignOut200ResponseFromJSON,
    SignOut200ResponseToJSON,
    SignUpRequestFromJSON,
    SignUpRequestToJSON,
    ValidateToken200ResponseFromJSON,
    ValidateToken200ResponseToJSON,
} from '../models';

export interface SignInOperationRequest {
    signInRequest?: SignInRequest;
}

export interface SignUpOperationRequest {
    signUpRequest?: SignUpRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * ログイン
     * ログイン
     */
    async signInRaw(requestParameters: SignInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign_in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters.signInRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateToken200ResponseFromJSON(jsonValue));
    }

    /**
     * ログイン
     * ログイン
     */
    async signIn(requestParameters: SignInOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateToken200Response> {
        const response = await this.signInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ヘッダーに`access-token`,`uid`,`client`必須。ログアウトする。
     * ログアウト
     */
    async signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignOut200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["access-token"] = this.configuration.apiKey("access-token"); // access-token authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["client"] = this.configuration.apiKey("client"); // client authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["expiry"] = this.configuration.apiKey("expiry"); // expiry authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["uid"] = this.configuration.apiKey("uid"); // uid authentication
        }

        const response = await this.request({
            path: `/auth/sign_out`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignOut200ResponseFromJSON(jsonValue));
    }

    /**
     * ヘッダーに`access-token`,`uid`,`client`必須。ログアウトする。
     * ログアウト
     */
    async signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignOut200Response> {
        const response = await this.signOutRaw(initOverrides);
        return await response.value();
    }

    /**
     * ユーザー新規登録
     * ユーザー新規作成
     */
    async signUpRaw(requestParameters: SignUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpRequestToJSON(requestParameters.signUpRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateToken200ResponseFromJSON(jsonValue));
    }

    /**
     * ユーザー新規登録
     * ユーザー新規作成
     */
    async signUp(requestParameters: SignUpOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateToken200Response> {
        const response = await this.signUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ヘッダー内のaccess-token,client,expiry,uidを検証する
     * トークン検証
     */
    async validateTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["access-token"] = this.configuration.apiKey("access-token"); // access-token authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["client"] = this.configuration.apiKey("client"); // client authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["expiry"] = this.configuration.apiKey("expiry"); // expiry authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["uid"] = this.configuration.apiKey("uid"); // uid authentication
        }

        const response = await this.request({
            path: `/auth/validate_token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateToken200ResponseFromJSON(jsonValue));
    }

    /**
     * ヘッダー内のaccess-token,client,expiry,uidを検証する
     * トークン検証
     */
    async validateToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateToken200Response> {
        const response = await this.validateTokenRaw(initOverrides);
        return await response.value();
    }

}
