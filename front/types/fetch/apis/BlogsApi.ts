/* tslint:disable */
/* eslint-disable */
/**
 * test-open-api
 * ほげほげ説明
 *
 * The version of the OpenAPI document: 1.0
 * Contact: test@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blog,
  CreateBlogRequest,
} from '../models';
import {
    BlogFromJSON,
    BlogToJSON,
    CreateBlogRequestFromJSON,
    CreateBlogRequestToJSON,
} from '../models';

export interface CreateBlogOperationRequest {
    createBlogRequest?: CreateBlogRequest;
}

export interface GetBlogRequest {
    id: number;
}

/**
 * 
 */
export class BlogsApi extends runtime.BaseAPI {

    /**
     * ブログを作成します
     * ブログ作成
     */
    async createBlogRaw(requestParameters: CreateBlogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blog>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/blogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlogRequestToJSON(requestParameters.createBlogRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogFromJSON(jsonValue));
    }

    /**
     * ブログを作成します
     * ブログ作成
     */
    async createBlog(requestParameters: CreateBlogOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blog> {
        const response = await this.createBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ブログ詳細を取得します
     * ブログ詳細
     */
    async getBlogRaw(requestParameters: GetBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blog>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBlog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogFromJSON(jsonValue));
    }

    /**
     * ブログ詳細を取得します
     * ブログ詳細
     */
    async getBlog(requestParameters: GetBlogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blog> {
        const response = await this.getBlogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ブログ一覧を取得します
     * ブログ一覧取得
     */
    async getBlogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Blog>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogFromJSON));
    }

    /**
     * ブログ一覧を取得します
     * ブログ一覧取得
     */
    async getBlogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Blog>> {
        const response = await this.getBlogsRaw(initOverrides);
        return await response.value();
    }

}
