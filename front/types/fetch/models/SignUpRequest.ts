/* tslint:disable */
/* eslint-disable */
/**
 * test-open-api
 * ほげほげ説明
 *
 * The version of the OpenAPI document: 1.0
 * Contact: test@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * ユーザー名
     * @type {string}
     * @memberof SignUpRequest
     */
    name: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof SignUpRequest
     */
    email: string;
    /**
     * パスワード
     * @type {string}
     * @memberof SignUpRequest
     */
    password: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof SignUpRequest
     */
    tel: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof SignUpRequest
     */
    postCode: string;
    /**
     * 住所
     * @type {string}
     * @memberof SignUpRequest
     */
    address: string;
    /**
     * 単一テーブル継承。Client=事業所利用者、Office=事業所
     * @type {string}
     * @memberof SignUpRequest
     */
    type: SignUpRequestTypeEnum;
    /**
     * 確認メールリダイレクト先url
     * @type {string}
     * @memberof SignUpRequest
     */
    confirmSuccessUrl: string;
}


/**
 * @export
 */
export const SignUpRequestTypeEnum = {
    Client: 'Client',
    Office: 'Office'
} as const;
export type SignUpRequestTypeEnum = typeof SignUpRequestTypeEnum[keyof typeof SignUpRequestTypeEnum];


/**
 * Check if a given object implements the SignUpRequest interface.
 */
export function instanceOfSignUpRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "tel" in value;
    isInstance = isInstance && "postCode" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "confirmSuccessUrl" in value;

    return isInstance;
}

export function SignUpRequestFromJSON(json: any): SignUpRequest {
    return SignUpRequestFromJSONTyped(json, false);
}

export function SignUpRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignUpRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'email': json['email'],
        'password': json['password'],
        'tel': json['tel'],
        'postCode': json['post_code'],
        'address': json['address'],
        'type': json['type'],
        'confirmSuccessUrl': json['confirm_success_url'],
    };
}

export function SignUpRequestToJSON(value?: SignUpRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'email': value.email,
        'password': value.password,
        'tel': value.tel,
        'post_code': value.postCode,
        'address': value.address,
        'type': value.type,
        'confirm_success_url': value.confirmSuccessUrl,
    };
}

