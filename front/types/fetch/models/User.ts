/* tslint:disable */
/* eslint-disable */
/**
 * test-open-api
 * ほげほげ説明
 *
 * The version of the OpenAPI document: 1.0
 * Contact: test@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 事業所利用者または事業所
 * @export
 * @interface User
 */
export interface User {
    /**
     * ID
     * @type {number}
     * @memberof User
     */
    readonly id: number;
    /**
     * 名前
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof User
     */
    tel: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof User
     */
    postCode: string;
    /**
     * 住所
     * @type {string}
     * @memberof User
     */
    address: string;
    /**
     * 単一テーブル継承のタイプ。事業所利用者がClient,事業所がOffice。
     * @type {string}
     * @memberof User
     */
    type: UserTypeEnum;
    /**
     * プロバイダ
     * @type {string}
     * @memberof User
     */
    readonly provider: string;
    /**
     * ユーザー識別子
     * @type {string}
     * @memberof User
     */
    readonly uid: string;
    /**
     * パスワード変更中
     * @type {boolean}
     * @memberof User
     */
    readonly allowPasswordChange: boolean;
}


/**
 * @export
 */
export const UserTypeEnum = {
    Client: 'Client',
    Office: 'Office'
} as const;
export type UserTypeEnum = typeof UserTypeEnum[keyof typeof UserTypeEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "tel" in value;
    isInstance = isInstance && "postCode" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "uid" in value;
    isInstance = isInstance && "allowPasswordChange" in value;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'email': json['email'],
        'tel': json['tel'],
        'postCode': json['post_code'],
        'address': json['address'],
        'type': json['type'],
        'provider': json['provider'],
        'uid': json['uid'],
        'allowPasswordChange': json['allow_password_change'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'email': value.email,
        'tel': value.tel,
        'post_code': value.postCode,
        'address': value.address,
        'type': value.type,
    };
}

